<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>秒杀 on Code Mark</title>
    <link>https://hzren.github.io/tags/%E7%A7%92%E6%9D%80/</link>
    <description>Recent content in 秒杀 on Code Mark</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>hzren@outlook.com (renhongzhen)</managingEditor>
    <webMaster>hzren@outlook.com (renhongzhen)</webMaster>
    <lastBuildDate>Sat, 01 Aug 2020 15:11:11 +0800</lastBuildDate><atom:link href="https://hzren.github.io/tags/%E7%A7%92%E6%9D%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>电商网站高并发场景下的库存加减思路思考</title>
      <link>https://hzren.github.io/blog/2020-08-01-%E7%94%B5%E5%95%86%E7%BD%91%E7%AB%99%E9%AB%98%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E5%BA%93%E5%AD%98%E5%8A%A0%E5%87%8F%E6%80%9D%E8%B7%AF%E6%80%9D%E8%80%83/</link>
      <pubDate>Sat, 01 Aug 2020 15:11:11 +0800</pubDate>
      <author>hzren@outlook.com (renhongzhen)</author>
      <guid>https://hzren.github.io/blog/2020-08-01-%E7%94%B5%E5%95%86%E7%BD%91%E7%AB%99%E9%AB%98%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E5%BA%93%E5%AD%98%E5%8A%A0%E5%87%8F%E6%80%9D%E8%B7%AF%E6%80%9D%E8%80%83/</guid>
      <description>前言 每当电子商务平台搞活动，“秒杀”经常是提升网站活跃度的利器之一。比如活动日早上10点1元爱疯7秒杀7台，谁看到了估计都想去秒一把，万一秒中了呢。秒杀的典型特征就是在特定的短时间突然涌入大量请求，对系统造成洪峰冲击，如果系统设计得不好，很容易被直接打垮掉。现在因为疫情原因，秒杀场景也变得更泛化，很多时候会出现商品被瞬间抢完的情况，如果时通过数据库直接扣库存的话， 会给数据库带来了很大压力。很有可能整个数据库会HANG在那里，导致整个系统被拖垮。
问题 为什么高并发场景下直接数据库扣库存会搞垮整个数据库呢？
数据库事务特性： 对于一条记录，数据库在该事务修改的时候加锁，在整个事务提交完才释放锁。 这样就导致一个问题，当同时有多个请求对同一条记录(库存记录)进行修改时，会在该记录上造成锁排队现象，流程大概时这样的：
在同一时间点有A，B，C五个数据库线程对记录K进行修改 A开始事务，对K加锁 B开始事务，对K加所，发现K已锁，等待K锁释放 C同上 A释放锁，B(也可能C，视数据库实现而定)获得锁，C继续等待 B释放锁，C获得锁 从上面的整个流程可以看出，在高并发场景下，对K的更新操作变成了线性操作，假设一个事务1ms处理完，当同时有成百上千个修改请求同时过来的时候，后面的修改请求响应时间就大大变长，如果数据库给每个链接分配一个单独的线程来处理，就会导致数据库服务器可用线程急剧下降，当无可用线程时，整个数据库就HANG在了那里。 解决思路 最好的并发就是没有并发 我们预先把库存数值缓存到内存中，这个内存可以是业务服务器内存，也可以是专用的缓存服务器，例如redis这种。当有库存操作的时候，我们直接在内存层面进行加减操作，在数据库没有唯一键冲突的情况下，数据库插入操作也比库存修改操作快的多，用这两种当时来实现库存个高并发修改。
redis扣库存 redis 是一个高兴能的缓存服务器，它提供了很强大的指令功能，它可以对某个缓存的KEY进行值的加减操作，其TPS可以达到10W级别。在redis层面，我们使用lua脚本来进行数据库加减操作。 脚本如下：
local num = redis.call(&amp;#39;get&amp;#39;, KEYS[1]) local minus = tonumber(KEYS[2]); if tonumber(num) &amp;gt; minus then redis.call(&amp;#39;decr&amp;#39;, minus) return 1 else return 0 end 库存扣减成功返回1， 库存扣减失败返回0；
数据库批量合并扣库存 使用redis控制库存增减虽然很快，但是如果服务器意外宕机，或者交易失败，库存回滚就会比较麻烦，特别是redis事务和数据库事务不在一个事务里，无法做到强一致性，不可避免的会产生一些数据不一致问题。因此我们需要在数据库层面也进行库存同步修改操作，具体操作流程如下：
用户下单，redis减库存成功，数据库插入下单记录 后台服务器每秒钟同步统计该商品所有新增库存订单，按照下单顺序，汇总库存修改总额，更新库存。 在上一步中，如果出现库存不足情况，或者用户超出了购买限制，标记为下单失败，如已支付，发起退款操作。 库存真正扣减成功后再进行发货操作。 定时同步数据库剩余库存到redis，redis库存值和数据库库存值可以不一致，最终下单是否成功，前台/客户端需要向服务端轮询该订单是否实际扣库存成功 当redis库存数量为0时，后台更新数据库剩余库存到redis。 5，6步时必须手段， 不然会出现用户下单成功了但是被库存不足砍单情况， 非用户原因下这样会引起纠纷的 通过上面的操作，我们成功把数据的多个并发修改操作合成了一个数据库的修改操作，大大减轻了数据库锁等待问题。
数据库分片扣库存 当商品数量很多时，我们根据商品ID可以把商品分片到多个数据库。这样对一个数据库的修改操作就可以分散到多个数据库。当订单量很大，数据库出现插入压力时，可以根据用户ID分片，把同一商品的不同用户订单分别存储到不同数据库，减轻单一数据库压力。</description>
    </item>
    
  </channel>
</rss>
